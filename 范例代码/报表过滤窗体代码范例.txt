using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using Kingdee.BOS.Core.CommonFilter.PlugIn;
using Kingdee.BOS.Core.DynamicForm.PlugIn.Args;
using Kingdee.BOS.Core.DynamicForm;
using Kingdee.BOS.Core.SqlBuilder;
using Kingdee.BOS.Core.Metadata;
using Kingdee.BOS;
using Kingdee.BOS.Core.Permission;
using Kingdee.BOS.Util;
using Kingdee.BOS.Core.DynamicForm.PlugIn.ControlModel;
using Kingdee.BOS.ServiceHelper;
using Kingdee.BOS.Orm.DataEntity;

namespace CMK.K3.RI.VIP.Business.PlugIn.RptFilter
{
    [Description("卡金额进销存查询过滤")]
    public class CMK_VIP_CardAmtInventryFilter : AbstractCommonFilterPlugIn
    {
        //private List<long> lstSalOrg;
        //private string saleOrgId;

        public override void TreeNodeClick(TreeNodeArgs e)
        {
            base.TreeNodeClick(e);
            this.InitSalOrgId();
        }

        public override void ButtonClick(ButtonClickEventArgs e)
        {
            base.ButtonClick(e);
            string str;
            if (((str = e.Key.ToUpperInvariant()) != null) && (str == "FBTNOK"))
            {
                e.Cancel = CheckValidator(e);
            }
        }

        private bool CheckValidator(ButtonClickEventArgs e)
        {
            bool flag = false;
            StringBuilder builder = new StringBuilder();
            //日期
            var startDate = this.View.Model.GetValue("FDateFrom");
            var endDate = this.View.Model.GetValue("FDateTo");
            if (startDate != null && endDate != null)
            {
                if (Convert.ToDateTime(startDate).CompareTo(Convert.ToDateTime(endDate)) > 0)
                {
                    builder.AppendLine("起始日期大于结束日期！");
                }
            }
            if (builder.ToString().Trim().Length > 0)
            {
                flag = true;
                this.View.ShowErrMessage(builder.ToString(), "过滤条件格式错误！", MessageBoxType.Advise);
            }
            return flag;
        }

      

        private string GetInFilter(string key, List<long> valist)
        {
            if ((valist != null) && !valist.IsEmpty<long>())
            {
                return string.Format("{0} in ({1})", key, string.Join<long>(",", valist));
            }
            return string.Format("{0}=-1", key);
        }
    }

        private void InitSalOrgId()
	//初始化销售组织，有销售组织的，才需要该函数
        {
            if (this.View.ParentFormView != null)
            {
                this.lstSalOrg = this.GetPermissionOrg(this.View.ParentFormView.BillBusinessInfo.GetForm().Id);
            }
            List<EnumItem> organization = this.GetOrganization(this.View.Context);
            this.View.GetFieldEditor<ComboFieldEditor>("FSaleOrgList", 0).SetComboItems(organization);

            //获取具有销售职能的组织
            if (this.Model.GetValue("FSaleOrgList").IsNullOrEmpty() && this.Context.CurrentOrganizationInfo.FunctionIds.Contains(101L))
            {
                this.Model.SetValue("FSaleOrgList", this.Context.CurrentOrganizationInfo.ID);                
            }
            else
            {
                this.View.Model.SetValue("FSaleOrgList", organization.FirstOrDefault().Value);
            }
        }

        public override void DataChanged(DataChangedEventArgs e)
        {
		//根据选择的销售组织，来设置对应的隶属组织
            string strSaleOrg = string.Empty;
            string str = e.Field.Key.ToUpperInvariant();

            if (str == null) return;
            if (str != "FSALEORGLIST" && str != "FBEGINDATE" && str != "FENDDATE" ) return;

            if (str == "FSALEORGLIST")
            {
                strSaleOrg = Convert.ToString(this.View.Model.GetValue("FSaleOrgList"));
                DynamicObject obj = this.View.Model.GetValue("FOrgAffiliation") as DynamicObject;
                long affiliationId = (obj == null) ? 0L : Convert.ToInt64(obj["Id"]);

                if ((strSaleOrg.Length > 0) && (strSaleOrg.IndexOf(',') < 0))
                {
                    long orgId = Convert.ToInt64(strSaleOrg);
                    List<long> list = new List<long>();
                    if (affiliationId > 0L)
                    {
                        list = OrganizationServiceHelper.GetOrgsInAffiliation(base.Context, orgId, affiliationId);
                    }
                    if (!list.Contains(orgId))
                    {
                        this.View.Model.SetValue("FOrgAffiliation", null);
                    }
                    if (base.Context.IsMultiOrg)
                    {
                        this.View.StyleManager.SetEnabled("FOrgAffiliation", "", true);
                    }
                }
                else
                {
                    this.View.Model.SetValue("FOrgAffiliation", null);
                    this.View.StyleManager.SetEnabled("FOrgAffiliation", "", false);
                }
                return;
            }

            
          
        }

 public override void BeforeF7Select(BeforeF7SelectEventArgs e)
        {
//在选择基础资料前应该先设置销售门店
            string strFilter = string.Empty;
            string strSaleOrg = Convert.ToString(this.View.Model.GetValue("FSaleOrgList"));

            if (string.IsNullOrWhiteSpace(strSaleOrg))
            {
                this.View.ShowMessage(ResManager.LoadKDString("请先选择销售门店！", "004104030002440", SubSystemType.SCM, new object[0]), MessageBoxType.Notice);
                e.Cancel = true;
                return;
            }

            switch (e.FieldKey.ToUpperInvariant())
            {
                case "FBEGINITEM":
                case "FENDITEM":
                    ListShowParameter dynamicFormShowParameter = (ListShowParameter)e.DynamicFormShowParameter;
                    dynamicFormShowParameter.MutilListUseOrgId = strSaleOrg;
                    break;
                case "FORGAFFILIATION":
                    strFilter = string.Format(" FTYPE = 101 AND ( FROOTORGID = {0} OR FAFFILIATIONID IN ( SELECT DISTINCT FAFFILIATIONID FROM T_ORG_AFFILIATIONENTRY WHERE FORGID = {0} )) ", strSaleOrg);
                    if (string.IsNullOrEmpty(e.ListFilterParameter.Filter))
                    {
                        e.ListFilterParameter.Filter = strFilter;
                    }
                    else
                    {
                        IRegularFilterParameter listFilterParameter = e.ListFilterParameter;
                        listFilterParameter.Filter = listFilterParameter.Filter + " AND " + strFilter;
                    }
                    break;
                default:
                    return;
            }
        }
}
